alias vi='start //b gvim'
alias vj='vi manifest.json'
alias nm='node manifest'
alias gurp='gars && gulp'
# alias rocky='./cntlm -c cntlm.ini -M https://www.google.com'
alias rocky='./cntlm -H -c cntlm.ini'

##################################### DOCKER #####################################
export DOCKER_TLS_VERIFY="1"
export DOCKER_HOST="tcp://192.168.99.100:2376"
export DOCKER_CERT_PATH="C:\Users\t5005a0\.docker\machine\machines\devbox"
export DOCKER_MACHINE_NAME="devbox"

alias dnmf='export DOCKER_MACHINE_NAME="finance"'

##################################### GIT #####################################
# Set a environment variable for the repository
repo=file:///C:/Workspace/Repository/Git

# Repos
alias gcla='git clone $repo/assembly.git'
alias gclar='git clone --recursive --local $repo/assembly.git'
alias gclp='git clone $repo/package.git'
alias gclm='git clone $repo/manifest.git'
alias gcls='git clone $repo/scripts.git'
alias gclv='git clone $repo/video.git'
alias gclc='git clone $repo/classes.git'
alias gclf='git clone $repo/fla.git'
alias gcln='git clone $repo/newdealer.git'
alias gcrp=clone_package_rebase
alias gcrm=clone_manifest_rebase

# Archive / Extract
alias gara='git archive --remote=$repo/Assembly.git master | tar -xv'
alias gars='git archive --remote=$repo/scripts.git master | tar -xv storyline/ --strip-components=1'
alias garr='git archive --remote=$repo/Assembly.git master | tar -xv shell/templates/retrofit/ --strip-components=3'

## gcrp
clone_package_rebase() {
    if [[ ($# -eq 0 || "$1" = "." ) && "$PWD" =~ Package ]]; then
        git clone $repo/package.git .
        dir="."
    else
        if [ "$2" = "." ]; then
            dir="."
        else
            dir=${1^}
        fi

        if [ "$1" = "english" ]; then
            branch="master"
        else
            branch=${1}
        fi

        if [[ $# -ne 0 && "$1" != "." ]]; then
            git clone $repo/package.git -b $branch $dir
        else
            read -p "You aren't in a Package directory ... Press enter to dismiss ..."
            exit
        fi
    fi

    cd $dir
    git rebase origin/master
    rm -rf .git
    vi zip_package.bat
    exit
}

## gcrm
clone_manifest_rebase() {
    if [[ $# -ne 0 ]]; then
        if [ "$2" = "." ]; then
            dir="."
        else
            dir=${1^}
        fi

        if [ "$1" = "english" ]; then
            branch="master"
        else
            branch=${1}
        fi

        mkdir $dir
        cd $dir

        git clone $repo/manifest.git -b $branch
    else
        git clone $repo/manifest.git
    fi

    cd manifest
    git rebase origin/master
    vi manifest.json
    exit
}

##################################### DEV #####################################

alias 7x=extract_to_folder
extract_to_folder() {
    7z x -y -o$1 $1.7z;
    find $1 -type d -exec chmod 755 {} \;
}

# Pass multiple files for scp to newdealer i.e:
# scpnd 2016 q2 file1.7z file2.7z ...
alias scpnd=send_to_newdealer
send_to_newdealer() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: scpnd 2016 q2 package1.7z package2.7z ..."
        return
    fi

    scp ${@:3} dev:/var/www/dev/newdealer/$1/$2/
}

alias swatch=sass_watch
sass_watch() {
    sass --watch $1 $2
}

# Execute from an immediate directory within a project via Beyond Compare
archive_project() {
    cd ..

    if [[ "${PWD:1:1}" != "c" ]]; then
        echo "Sorry, you need to be in your local machine's project folder!"
        sleep 2
        return
    fi

    project="${PWD##*/}"

    if [[ $project =~ ^[0-9]{2}-[0-9]{3} ]]; then
        
        echo "Removing excess ..."
        rm -rf "2 Design"
        rm -rf "3 Development"
        rm -rf "4 Production/Assembly"
        rm -rf "4 Production/Interactive Assembly"
        rm -f "$project".7z

        echo "Archiving \"$project\" ..."
        "C:\Program Files\7-Zip\7z.exe" a "$project" .
        "C:\Program Files\7-Zip\7z.exe" l "$project".7z '-xr!.git'
        manifests=$("C:\Program Files\7-Zip\7z.exe" l "$project".7z  | grep 'manifest\\manifest.json' | tr -s ' ' | cut -d ' ' -f 4)

        for size in $manifests
        do
            if [[ $size -gt 600 ]]; then
                archived=true;
                echo "This manifest in the archive looks good.."
            else
                archived=false;
                echo ""
                read -p "Not removing Production, a manifest file seems too small! ..."
                exit
            fi
        done

        if [[ $archived = true ]]; then
            echo "Removing Production ..."
            rm -rf "4 Production"
        fi

    else
        read -p "\"$project\" is not a valid project! ... Press enter to dismiss ..."
    fi
}
