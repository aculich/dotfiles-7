# Source local aliases
if [ -f ~/local.aliases ]; then
    source ~/local.aliases
fi

############################## CORE  ##############################
alias ls='ls --color=auto'
alias l='ls -hAlF'
alias ll='ls -halF'
alias grep='grep --color=auto'
alias search='grep -rl'
alias x='exit'
alias ag='alias | grep'
alias hfc='history 0 | fzf | cut -c 8- | clip'
alias bc='bcomp.exe'
alias code='code-insiders'

alias ..='cd ..'
alias ~='cd -'
alias ocd='cd "$OLDPWD"'

alias md5=md5hash
md5hash() { echo -n "$1" | openssl md5; }

alias mk4=mkv_to_mp4
mkv_to_mp4() { for i in *.mkv; do ffmpeg -i "$i" -loglevel error -codec copy "${i%.*}.mp4"; done; }

alias sha1='openssl sha1'
alias sha256='openssl sha256'
alias path='echo "${PATH//:/$'"'"'\n'"'"'}"'
alias scpid='ssh-copy-id -i ~/.ssh/id_rsa'
alias scpidr='ssh-copy-id -i ~/.ssh/mediarave_rsa'

alias sshkey=sshkey_ed25519
sshkey_ed25519() { ssh-keygen -t ed25519 -f $1_ed25519 -C alok@$1; }

ssh_agent_forward() { eval $(ssh-agent -s) && ssh-add ~/.ssh/$1 && ssh -A $2 && ssh-agent -k; }
alias ssa='ssh_agent_forward id_rsa $1'
alias ssr='ssh_agent_forward dev/random_ed25519 $1'

alias sr='screen -r'

alias sf='setfont sun12x22'

alias calc='bc --quiet'

alias hdc='rm ~/.bash_history && history -c'
alias hdr=history_del_range
history_del_range() { for i in {1..100}; do history -d $1; done; }

alias cs=cheat_sheet; cheat_sheet() { curl cheat.sh/$1; }

############################## APPS  ##############################
alias sup='scoop update && scoop status && scoop update --all'
alias src='scoop cleanup --all && scoop cache rm --all'
alias bup='brew update && brew upgrade && brew cleanup'

############################## WSL  ##############################

alias wlv='wsl --list -v'
alias wex="wsl --export arch arch-$(date +'%Y%m%d').tar"

if [[ $is_wsl ]]; then
	alias dev='cd ~/workspace/develop/'

	wbc() {
		local path1="$(wslpath -w "$1")"
		local path2="$(wslpath -w "$2")"
		bc "$path1" "$path2" &
	}
fi

############################## NEOVIM  ##############################
alias v='vi'
alias vi='nvim'
alias nvir=nvim_remote
nvim_remote() { nvim scp://$1//var/www/$2; }

alias vib='vi ~/.bashrc'
alias vic='vi ~/.ssh/config'
alias vin='cd ~/.dotfiles/nvim/ && vi ./lua/config/keymaps.lua ./lua/plugins/plugins.lua'
alias viw='vi ~/.config/wezterm/wezterm.lua'

alias nvl='nv nvim-lazyvim'   # alias nvl="NVIM_APPNAME=nvim-lazyvim nvim"
alias nvk='nv nvim-kickstart' # alias nvk="NVIM_APPNAME=nvim-kickstart nvim"
alias nvh='nv nvim-chad'      # alias nva="NVIM_APPNAME=nvim-chad nvim"
alias nvc='nv nvim-core'      # alias nvc="NVIM_APPNAME=nvim-core nvim"

function nv() {
	items=("default" "nvim-lazyvim" "nvim-kickstart" "nvim-astrovim" "nvim-core")

	if [[ -z $1 ]]; then
		config=$(printf "%s\n" "${items[@]}" | fzf --prompt="î˜« Neovim Config:" --height=~50% --layout=reverse --border --exit-0)
	else
		config=$1
	fi

	if [[ -z $config ]]; then
		echo "Nothing selected"
		return 0
	elif [[ $config == "default" ]]; then
		config=""
	else
		alias vi="NVIM_APPNAME=${config} nvim"
	fi
	NVIM_APPNAME=$config nvim $@
}

if [ -n "$($SHELL -c 'echo $ZSH_VERSION')" ]; then
	bindkey -s ^a "nvims\n"
elif [ -n "$($SHELL -c 'echo $BASH_VERSION')" ]; then
	bind -x '"\C-a": nvims'
else
	bindkey -s ^a "nvims\n"
fi

############################## DOCKER ##############################

if [[ $is_wsl ]]; then
	alias dss='sudo systemctl status docker'
fi

alias dp='docker ps -a'
alias dps='docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Command}}\t{{.Ports}}\t{{.Names}}"'
alias dpa='docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Command}}\t{{.Ports}}\t{{.Names}}"'

alias dl='docker logs'

alias dRf='docker rm -f'
# alias dRaf='docker rm -f $(docker ps -a -q)'

alias dat=attach_terminal
attach_terminal() { docker exec -it "$1" bash; }

alias da='docker attach'

alias dim='docker images'
alias diRm='docker rmi'
alias diP='docker image prune'

alias dirt='docker_run'; docker_run() { docker run --name $2 -it $1; }

alias dvl='docker volume ls'
alias dvP='docker volume prune'

alias dc='docker-compose'
alias dcu='docker-compose up -d'
alias dcd='docker-compose down'
alias dcr='docker-compose restart'
alias dcp='cp -r ~/sync/project/. .'

alias ds='docker start'
alias dS='docker stop'
alias dsa='docker start $(docker ps -a -q)'
alias dSa='docker stop $(docker ps -a -q)'

############################## GIT  ##############################
if [ -f ~/.dotfiles/git/git.aliases ]; then
	source ~/.dotfiles/git/git.aliases
	alias vigc='vi ~/.gitconfig'
	alias viga='vi ~/.dotfiles/git/git.aliases'
fi

# GitHub
alias dotfiles='git clone git@github.com:alok-mishra/dotfiles.git'
alias dotnvim='git clone git@github.com:alok-mishra/nvim.git'
github_init() { curl -u "alok-mishra" https://api.github.com/user/repos -d "{'name':$1,'description':$2}"; }
alias ghi='github_init'

# GitLab
gitlab_clone() { git clone git@gitlab.com:$1/$2 $3; }
alias gclglm='gitlab_clone mediarave $1 $2'
alias gclglf='gitlab_clone fcapi $1 $2'
alias gclgls='gitlab_clone stellantispi $1 $2'

alias pushalllab='git push gitlab --all'
alias remotelabpackage='git remote add gitlab git@gitlab.com:stellantispi/package.git'
alias remotelabmanifest='git remote add gitlab git@gitlab.com:stellantispi/manifest.git'

# BitBucket
alias gclbb='gitlab_clone_bitbucket'
gitlab_clone_bitbucket() { git clone git@bitbucket.org:learnlife/$1 $2; }

# WordPress
alias gclwp=git_clone_wordpress
git_clone_wordpress() {
	dir="wordpress"
	if [[ $# -ne 0 ]]; then
		dir=${1}
	fi
	git clone --depth 1 https://github.com/WordPress/WordPress.git $dir && rm -rf $dir/.git
}

############################## ADMIN  ##############################
HISTTIMEFORMAT="%d/%m/%y %T "

alias suvi='sudo -E vim'

alias wcd=www_cd
www_cd() { cd /var/www/$1; }

alias compress='tar -cvzf ../${PWD##*/}.tar.gz .'
alias extract='tar -zxvf'

alias up='sudo apt update && time sudo apt upgrade'
alias upd='sudo apt update && time sudo apt dist-upgrade'

alias flash=flash_image
flash_image() { sudo dd if=$1 of=$2 bs=4M oflag=direct status=progress && sync; }

alias phpinfo='php -i | grep php.ini'

alias dbroot='sudo mysql --user=root --password=`cat /root/.digitalocean_password`'
alias dblog='sudo less /var/log/mysql/error.log'
alias dbres='sudo service mysql start'
alias dbbak=db_backup
db_backup() { mysqldump --user wordpress --password=$1 wordpress > ~/backups/db-backup.sql; }

alias syncdu=sync_down_uploads
sync_down_uploads() { rsync -raz --ignore-existing --omit-dir-times --max-size=$3mb --progress $1:/var/www/$2/wp-content/uploads wp-content/; }

alias syncuu=sync_up_uploads
sync_up_uploads() { rsync -raz --ignore-existing --omit-dir-times --max-size=$3mb --progress wp-content/uploads $1:/var/www/$2/wp-content/; }

alias weblog='sudo less /var/log/apache2/access.log'
alias rpclog='sudo grep xmlrpc /var/log/apache2/access.log'

alias chowh='sudo chown -R http:http . && sudo chown -R alok:alok .git'
alias choww='sudo chown -R www-data:www-data . && sudo chown -R alok:alok .git'
alias chowa='sudo chown -R alok:alok .'

alias webres='sudo systemctl restart apache2'
alias webrel='sudo systemctl reload apache2'
alias fws='sudo ufw status numbered'

alias lcc='sudo certbot certificates'
alias lca='sudo certbot --apache'
alias lcr='sudo certbot revoke --cert-name'

alias blockrpc='sudo a2enconf block-xmlrpc'

alias wbak=www_backup
www_backup() { tar -cvzf ~/backups/$1.tar.gz /var/www/$1; }

alias warc=static_archive
static_archive() { wget -P $2 -mpck --user-agent="" -e robots=off --wait 1 -E $1; }

############################## PYTHON ##############################

if command -v conda &>/dev/null; then
	alias pcl='conda list'
	alias pcle='conda env list'
	alias pci='conda install'
	alias pcic='conda install -c'
	alias pcu='conda update'
	alias pcc='conda create -n'
	alias pca='conda activate'
	alias pcd='conda deactivate'
fi

############################## NODE  ##############################

node_run() {
    if [ -f ./yarn.lock ]; then
        pm=yarn
        $pm run "$1"
    elif [ -f ./package-lock.json ]; then
        pm=npm
        $pm run "$@"
    else
        echo "Have you installed the package?"
    fi

}

alias nr='node_run'
alias nrb='node_run build'
alias nrp='node_run preview'
alias nrd='npm run develop --if-present && npm run dev --if-present && npm run start'
alias nrs='node_run start'
alias nrt='node_run test'

alias ni='npm install'
alias nig='npm --global install'
alias nic='npm ci'
alias nid='npm --save-dev install'
alias nup='npm update'

alias scss='node-sass --output-style compact'

############################## SVELTE ##############################
alias vite='npm create vite@latest'
alias skit='npm create svelte@latest'
alias wskit='winpty npm.cmd create svelte@latest'

############################## ANGULAR ##############################
# alias ngs='ng serve --open'
# alias ngb='ng build --prod'
# alias ngn='ng new --routing --style=scss --skip-install'
# alias nggc='ng generate component --flat --spec=false'
# alias nggl='ng generate class'
# alias nggm='ng generate module --flat'
# alias nggp='ng generate pipe --flat --spec=false'
# alias nggs='ng generate service --flat --spec=false'

############################## FLUTTER ##############################
# export PATH=$PATH:~/sdk/flutter/bin
# alias gclfsdk='git clone --depth 1 https://github.com/flutter/flutter.git -b stable ~/sdk/flutter/'

############################## ANDROID ##############################
# if [ -d "~/sdk/android/" ]; then
#     #Android Platform Tools
#     PATH=$PATH:~/sdk/android/platform-tools/:~/sdk/android/tools/:~/sdk/android/tools/bin
#
#     alias avdlst='avdmanager.bat list avd'
#     alias avdgal='avdmanager.bat create avd --force --name "galaxy" --abi "google_apis/x86" --device "Galaxy Nexus" --package "system-images;android-18;google_apis;x86"'
#     alias avdnex='avdmanager.bat create avd --force --name "nexus" --abi "google_apis/x86" --device "Nexus 5X" --package "system-images;android-25;google_apis;x86"'
#     alias emunex='emulator -avd nexus -gpu on -skin 1080x1920'
#     alias emugal='emulator -avd galaxy -gpu on -skin 720x1280'
#     alias adbi='adb install'
#     alias adbu='adb uninstall'
# fi

############################## GO ##############################
alias gor='go run'

############################## HASS  ##############################
if [ -f /home/homeassistant/.homeassistant/ha.aliases ]; then
   source /home/homeassistant/.homeassistant/ha.aliases
   alias viha='vi /home/homeassistant/.homeassistant/ha.aliases'
fi
